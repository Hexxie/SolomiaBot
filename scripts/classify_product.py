import asyncio
from solomia.core.db import engine
from sqlalchemy import text
from solomia.services.category_service import find_best_category, classify_with_llm


THRESHOLD = 0.75  # below this ‚Üí product probably not found

def clean_text(text: str) -> str:
    return text.encode("utf-8", "surrogatepass").decode("utf-8", "ignore")

async def main():
  print("üçé –í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –∫—É—Ä–∫–∞, –≥—Ä–µ—á–∫–∞, —è–±–ª—É–∫–æ):")
  print("–ù–∞—Ç–∏—Å–Ω–∏ Enter –±–µ–∑ —Ç–µ–∫—Å—Ç—É, —â–æ–± –≤–∏–π—Ç–∏.\n")

  while True:
    product = input("> ").strip()
    if not product:
      print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")
      break

    try:
      async with engine.connect() as conn:
        product = clean_text(product).strip()
        category, score, is_known = await find_best_category(conn, product)

      if not is_known:
        async with engine.connect() as conn:
          categories_res = await conn.execute(text("SELECT name FROM food_categories"))
          categories = [row[0] for row in categories_res.all()]

        predicted = await classify_with_llm(product, categories)
        print(f"LLM classified: {predicted}")
      else:
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category} ({score:.2f})")


    except Exception as e:
      print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}\n")


if __name__ == "__main__":
    asyncio.run(main())
