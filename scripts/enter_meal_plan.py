import asyncio
from solomia.core.db import SessionFactory

from solomia.repository.user_repository import UserRepository
from solomia.repository.category_repository import FoodCategoryRepository
from solomia.models.category_to_user import CategoryToUser

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

async def show_user_plan(session: AsyncSession, telegram_id: str):
    """–ü–æ–∫–∞–∑—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤–∞–≥–∞–º–∏"""
    user_repo = UserRepository(SessionFactory)
    user_id = await user_repo.get_id_by_telegram_id(telegram_id)
    if not user_id:
        print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return None

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = await session.execute(select(CategoryToUser).where(CategoryToUser.user_id == user_id))
    links = categories.scalars().all()

    if not links:
        print("‚ö†Ô∏è –ü–ª–∞–Ω –Ω–µ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π.")
    else:
        print(f"\nüìã –ü–æ—Ç–æ—á–Ω–∏–π –ø–ª–∞–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}:")
        result = await session.execute(
        select(CategoryToUser)
        .options(selectinload(CategoryToUser.category))
        .where(CategoryToUser.user_id == user_id)
    )
    links = result.scalars().all()

    for link in links:
        print(f"{link.category.name}: {link.amount_grams or 0} –≥")

    return user_id

async def edit_user_plan(session: AsyncSession, user_id):
    """–†–µ–¥–∞–≥—É—î –∞–±–æ –¥–æ–¥–∞—î –≤–∞–≥–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ —Ç–∞–±–ª–∏—Ü—ñ FoodCategory
    category_repo = FoodCategoryRepository(SessionFactory)
    categories = await category_repo.get_all()  # –æ—á—ñ–∫—É—î—Ç—å—Å—è list[FoodCategory]

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    existing = await session.execute(
        select(CategoryToUser).where(CategoryToUser.user_id == user_id)
    )
    existing_map = {link.category_id: link for link in existing.scalars().all()}

    print("\n‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (Enter ‚Äî –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ):")
    for cat in categories:
        current_val = existing_map.get(cat.id).amount_grams if cat.id in existing_map else 0
        try:
            raw = input(f"{cat.name} [{current_val} –≥] = ").strip()
        except EOFError:
            continue
        if raw == "":
            # –Ω—ñ—á–æ–≥–æ –Ω–µ –º—ñ–Ω—è—î–º–æ
            continue
        try:
            val = float(raw)
        except ValueError:
            print("‚õîÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        if cat.id in existing_map:
            # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            existing_map[cat.id].amount_grams = val
        else:
            # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
            new_link = CategoryToUser(user_id=user_id, category_id=cat.id, amount_grams=val)
            session.add(new_link)

    await session.commit()
    print("\n‚úÖ –ü–ª–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ!")

async def main():
    telegram_id = input("–í–≤–µ–¥–∏ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ").strip()
    async with SessionFactory() as session:
        user_id = await show_user_plan(session, telegram_id)
        if not user_id:
            return

        answer = input("\n–•–æ—á–µ—à –¥–æ–¥–∞—Ç–∏/–∑–º—ñ–Ω–∏—Ç–∏ –ø–ª–∞–Ω? (y/n): ").strip().lower()
        if answer == "y":
            await edit_user_plan(session, user_id)
        else:
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")


if __name__ == "__main__":
    asyncio.run(main())