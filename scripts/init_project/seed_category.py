import asyncio
import os
import functools
import google.generativeai as genai
from sqlalchemy import text

from solomia.models.food_category import FoodCategory
from solomia.core.db import Base, engine

# =====================
# CONFIG
# =====================
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    raise ValueError("‚ö†Ô∏è Please set GOOGLE_API_KEY in your environment!")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini –∫–ª—ñ—î–Ω—Ç–∞
genai.configure(api_key=GOOGLE_API_KEY)
embedding_model = "models/text-embedding-004"

# =====================
# CATEGORIES
# =====================
CATEGORIES = [
    ("–ë–æ–±–æ–≤—ñ", ["–∫–≤–∞—Å–æ–ª—è", "—Å–æ—á–µ–≤–∏—Ü—è", "–Ω—É—Ç"]),
    ("–ö–∞—Ä—Ç–æ–ø–ª—è / –ö—É–∫—É—Ä—É–¥–∑–∞", ["–∫–∞—Ä—Ç–æ–ø–ª—è", "–∫—É–∫—É—Ä—É–¥–∑–∞ —Å–≤—ñ–∂–∞"]),
    ("–ö—Ä—É–ø–∏ / –ó–µ—Ä–Ω–æ–≤—ñ", ["–≥—Ä–µ—á–∫–∞", "—Ä–∏—Å", "–±—É–ª–≥—É—Ä", "–ø–ª–∞—Å—Ç—ñ–≤—Ü—ñ", "–æ–≤–µ—Å"]),
    ("–•–ª—ñ–± / –ú–∞–∫–∞—Ä–æ–Ω–∏ / –ë–æ—Ä–æ—à–Ω–æ", ["–º–∞–∫–∞—Ä–æ–Ω–∏ —Ç–≤–µ—Ä–¥–∏—Ö —Å–æ—Ä—Ç—ñ–≤", "—Ü—ñ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–∏–π —Ö–ª—ñ–±", "–ª–∞–≤–∞—à"]),
    ("–ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏", ["–º–æ–ª–æ–∫–æ", "–∫–µ—Ñ—ñ—Ä", "–π–æ–≥—É—Ä—Ç", "—Å–∏—Ä"]),
    ("–ë—ñ–ª–∫–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ (–º º—è—Å–æ, —Ä–∏–±–∞, —è–π—Ü—è)", ["–∫—É—Ä–∫–∞", "—Ä–∏–±–∞", "—Ç–µ–ª—è—Ç–∏–Ω–∞", "—è–π—Ü—è", "–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏"]),
    ("–û–≤–æ—á—ñ, –∑–µ–ª–µ–Ω—å, –≥—Ä–∏–±–∏", ["–∫–∞–ø—É—Å—Ç–∞", "–æ–≥—ñ—Ä–∫–∏", "–≥—Ä–∏–±–∏", "–ø–æ–º—ñ–¥–æ—Ä–∏", "–∑–µ–ª–µ–Ω—å"]),
    ("–û–ª—ñ—ó / –ñ–∏—Ä–∏", ["–æ–ª—ñ—è", "–∞–≤–æ–∫–∞–¥–æ", "–º–∞–π–æ–Ω–µ–∑", "–≥—ñ—Ä—á–∏—Ü—è"]),
    ("–§—Ä—É–∫—Ç–∏ / –Ø–≥–æ–¥–∏", ["—è–±–ª—É–∫–æ", "–±–∞–Ω–∞–Ω", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–º–∞–Ω–≥–æ"]),
    ("–ì–æ—Ä—ñ—Ö–∏ / –ù–∞—Å—ñ–Ω–Ω—è", ["–≤–æ–ª–æ—Å—å–∫–∏–π –≥–æ—Ä—ñ—Ö", "–º–∏–≥–¥–∞–ª—å", "–Ω–∞—Å—ñ–Ω–Ω—è –≥–∞—Ä–±—É–∑–∞"]),
    ("–°–Ω–µ–∫–∏ / –°–æ–ª–æ–¥–∫–µ / –ë—É–¥—å-—á–æ–≥–æ", ["–ø–µ—á–∏–≤–æ", "—à–æ–∫–æ–ª–∞–¥", "–∫–æ–≤–±–∞—Å–∞"]),
]


# =====================
# EMBEDDING FUNCTION
# =====================
async def embed_text_async(text: str):
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(
        None,
        functools.partial(
            genai.embed_content,
            model=embedding_model,
            content=text,
            task_type="retrieval_document"
        )
    )


# =====================
# SEED FUNCTION
# =====================
async def seed_categories():
    async with engine.connect() as conn:
        await conn.execution_options(isolation_level="AUTOCOMMIT")
        
        for name, examples in CATEGORIES:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
            res = await conn.execute(
                text("SELECT id FROM food_categories WHERE name = :name"),
                {"name": name}
            )
            if res.scalar_one_or_none():
                print(f"‚è≠Ô∏è  Category '{name}' already exists, skipping.")
                continue

            # –ì–µ–Ω–µ—Ä—É—î–º–æ embedding
            text_input = f"{name}: {', '.join(examples)}"
            result = await embed_text_async(text_input)
            embedding = result["embedding"]
            embedding_str = "[" + ", ".join(str(x) for x in embedding) + "]"

            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
            await conn.execute(
                text("""
                    INSERT INTO food_categories (name, examples, embedding)
                    VALUES (:name, :examples, :embedding)
                """),
                {
                    "name": name,
                    "examples": examples,  # —è–∫—â–æ JSONB ‚Äî –ø—Ä–∞—Ü—é—î
                    "embedding": embedding_str
                }
            )
            print(f"‚úÖ Added '{name}'")

        # commit –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–±–∏—Ç—å—Å—è –≤ –∫—ñ–Ω—Ü—ñ `engine.begin()`

    print("üéâ All categories seeded successfully!")


if __name__ == "__main__":
    asyncio.run(seed_categories())